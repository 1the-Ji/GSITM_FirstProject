package com.gsitm.conferenceinfo;


import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.gsitm.dao.ReservationDAO;
import com.gsitm.dao.RoomDAO;
import com.gsitm.dto.RoomDTO;

/**
 * Servlet implementation class ConferenceInfoAction
 */
@WebServlet("/conferenceinfo")
public class ConferenceInfoAction extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final String[] timeList =
		   {"09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30",
			"13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00",
			"16:30", "17:00", "17:30", "18:00"};

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//최초 서블릿 요청시 회의실 조회 페이지로 이동
		RequestDispatcher dispatcher = request.getRequestDispatcher("./view/reservation/conferenceInfo.jsp");
		dispatcher.forward(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");

		String selectedDate = request.getParameter("selectedDate"); //선택한 날짜
		String startHour = request.getParameter("startHour"); //선택한 사용시작 시간
		String finishHour = request.getParameter("finishHour"); //선택한 사용종료 시간
		String selectedBuilding = request.getParameter("selectedBuilding"); //건물명

		RoomDAO roomDao = new RoomDAO();
		ReservationDAO reservationDao = new ReservationDAO();

		//사용자가 선택한 건물의 회의실 정보를 roomList에 저장
		List<RoomDTO> roomList = roomDao.selectAll(selectedBuilding);
		String[] resAbleStr = new String[roomList.size()]; //각 회의실별 예약가능/불가능 여부 리스트
		String timeTableHtml = "";

		//사용자가 선택한 건물의 회의실이 예약가능한지 불가능한지 조회
		for(int i=0; i < roomList.size(); i++){

			timeTableHtml += "<tr><td>" + roomList.get(i).getRoomName() + "</td>";

			boolean b = reservationDao.selectAbleReservation(roomList.get(i).getRoomId(), selectedDate, startHour, finishHour);
			if(b == true)
				resAbleStr[i] = "예약가능";
			else
				resAbleStr[i] = "예약불가";

			//각 시간별 회의실 사용 현황을 조회하기 위해 30분 단위로 사용중인 회의실이 있는지 쿼리
			for(int j=0; j < timeList.length - 1; j++){
				b = reservationDao.selectAbleReservation(roomList.get(i).getRoomId(), selectedDate, timeList[j] + ":00", timeList[j+1] + ":00");

				if(b == false){
					timeTableHtml += "<td class='reserved'></td>";
				} else {
					timeTableHtml += "<td></td>";
				}
			}
			timeTableHtml += "</tr>";
		}
		//상세정보를 출력하기 위해 건물명을 파라미터로 다시 넘김
		request.setAttribute("selectedBuilding", selectedBuilding);
		request.setAttribute("roomList", roomList);
		request.setAttribute("resAbleStr", resAbleStr);
		request.setAttribute("timeTableHtml", timeTableHtml);
		request.setAttribute("selectedDate", selectedDate);
		request.setAttribute("startHour", startHour);
		request.setAttribute("finishHour", finishHour);

		//해당 건물의 회의실 정보를 담은 ArrayList인 roomList를 회의실 조회 페이지로 전달
		RequestDispatcher dispatcher = request.getRequestDispatcher("./view/reservation/conferenceInfo.jsp");
		dispatcher.forward(request, response);
	}
}
