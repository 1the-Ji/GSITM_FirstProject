package com.gsitm.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

import com.gsitm.common.ConstString;
import com.gsitm.dto.ReservationDTO;
/**
 *
 * @프로그램   : EmployeesDAO.java
 * @작성일     : 2017. 5. 2.
 * @작성자     : 지승훈
 * @기능       : 회의실/예약실 사용후 결제를 하기위한 부서 관련 DAO
 * @버전       : 1.0
 *
 */

public class ReservationDAO {
	public static Connection getConnection() {
	      Connection conn = null;
	      try {
	    	  Class.forName(ConstString.JDBC_DRIVER);
		      conn = DriverManager.getConnection(ConstString.DB_SERVER, ConstString.DB_USER, ConstString.DB_PASSWD);
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	      return conn;
	   }

	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 김태형
	 * @기능    	: 회의실/교육실 예약 등록 메소드
	 * @메소드명    : insert
	 * @param reservationDTO
	 */
	public void insert(ReservationDTO reservationDTO){

		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = "INSERT INTO reservation "
				+ "(REG_IN_ID, EMP_ID, ROOM_ID, START_DATE, FINISH_DATE, FEE, USE_COUNT, APPRO_DATE, REG_STATE, USE_STATE, USE_PURPOSE, USE_NETWORK, REG_TERM) "
				+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		try {
			   int pIdx = 0;
			   pstmt = con.prepareStatement(sql);
			   pstmt.setInt(++pIdx, reservationDTO.getRegInId());
			   pstmt.setString(++pIdx, reservationDTO.getEmpId());
			   pstmt.setString(++pIdx, reservationDTO.getRoomId());
			   pstmt.setDate(++pIdx, new java.sql.Date(reservationDTO.getStartDate().getTime()));
			   pstmt.setDate(++pIdx, new java.sql.Date(reservationDTO.getFinishDate().getTime()));
			   pstmt.setInt(++pIdx, reservationDTO.getFee());
			   pstmt.setInt(++pIdx, reservationDTO.getUseCount());

			   if(reservationDTO.getApproDate() != null)
				   pstmt.setDate(++pIdx, new java.sql.Date(reservationDTO.getApproDate().getTime()));
			   else
				   pstmt.setDate(++pIdx, null);

			   pstmt.setString(++pIdx, reservationDTO.getRegState());
			   pstmt.setString(++pIdx, reservationDTO.getUseState());
			   pstmt.setString(++pIdx, reservationDTO.getUsePurpose());
			   pstmt.setString(++pIdx, reservationDTO.getUseNetwork());
			   pstmt.setString(++pIdx, reservationDTO.getRegTerm());

			   pstmt.executeUpdate();

		      } catch (SQLException e) {
		    	 System.out.println(e.getMessage());
		         throw new RuntimeException(e);
		      } finally {
		    	  ReservationDAO.close(con, pstmt);
		      }
	}
	/**
	 *
	 * @작성일      : 2017. 5. 13.
	 * @작성자      : 지승훈
	 * @기능    	: 예약상태를 수정하기위한 update DAO (결재대기, 승인대기, 승인완료)
	 * @메소드명    : update
	 * @param reservationDTOm
	 * @param num
	 */
	public void update(int RegInId, String useState){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = "update reservation set reg_state = ? where reg_in_id = ?"; //sql문 작성
		   try {
			   pstmt = con.prepareStatement(sql);
			   pstmt.setString(1, useState);
			   pstmt.setInt(2, RegInId);
			   pstmt.executeUpdate();
		      } catch (SQLException e) {
		    	  throw new RuntimeException(e);
		      } finally {
		    	  ReservationDAO.close(con, pstmt);;
		      }
	}

	/**
	 *
	 * @작성일  : 2017. 5. 12.
	 * @작성자  : 김태형
	 * @기능    : 예약자ID(empID)를 통해 예약 내역을 가져온다.
	 * @메소드명 : select
	 * @param empId - 예약자 id
	 * @return - reservation Row List
	 */
	public List<ReservationDTO> select(String empId){
		List<ReservationDTO> resList = new LinkedList<>();

		Connection con = getConnection();
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      //사용자가 조회한 시간에 회의실이 예약되어 있는지 확인
	      String sql = "select * from RESERVATION where emp_id like ? ORDER BY reg_date";

	         try {
	             pstmt = con.prepareStatement(sql);
	             pstmt.setString(1, empId);

	             rs = pstmt.executeQuery();
	             while(rs.next()){
	                ReservationDTO reservationDTO = new ReservationDTO();
	                reservationDTO.setRegInId(rs.getInt("reg_in_id"));
	                reservationDTO.setEmpId(rs.getString("emp_id"));
	                reservationDTO.setRoomId(rs.getString("room_id"));
	                reservationDTO.setRegTerm(rs.getString("reg_term"));
	                reservationDTO.setStartDate(rs.getDate("start_date"));
	                reservationDTO.setFinishDate(rs.getDate("finish_date"));
	                reservationDTO.setFee(rs.getInt("fee"));
	                reservationDTO.setUseCount(rs.getInt("use_count"));
	                reservationDTO.setApproDate(rs.getDate("appro_date"));
	                reservationDTO.setRegDate(rs.getDate("reg_date"));
	                reservationDTO.setRegState(rs.getString("reg_state"));
	                reservationDTO.setUseState(rs.getString("use_state"));
	                reservationDTO.setUsePurpose(rs.getString("use_purpose"));
	                reservationDTO.setUseNetwork(rs.getString("use_network"));

	                resList.add(reservationDTO);
	             }

	            } catch (SQLException e) {
	            	throw new RuntimeException(e);
	            } finally {
	               ReservationDAO.close(con, pstmt);
	            }

		return resList;
	}

	/**
	 *
	 * @작성일      : 2017. 5. 12.
	 * @작성자      : 지승훈
	 * @기능    	: 승인 및 반려를 하기위한 회의실 조회
	 * @메소드명    : select
	 * @param start
	 * @param finish
	 * @param roomType
	 * @return
	 */
	public List<ReservationDTO> select(String startDate, String finishDate, String roomId){
		List<ReservationDTO> reservationCrList = new LinkedList<>();

		Connection con = getConnection();
	      PreparedStatement pstmt = null;
	      ResultSet rs = null;
	      //사용자가 조회한 시간에 회의실이 예약되어 있는지 확인
	      String sql = "select * from reservation where room_id like ? and reg_state like '승인대기' and to_char(reg_date,'yyyy-mm-dd') between ? and ?";

	         try {
	             pstmt = con.prepareStatement(sql);
	             pstmt.setString(1, roomId);
	             pstmt.setString(2, startDate);
	             pstmt.setString(3, finishDate);
	             rs = pstmt.executeQuery();
	             while(rs.next()){
	                ReservationDTO reservationDTO = new ReservationDTO();
	                reservationDTO.setRegInId(rs.getInt("reg_in_id"));
	                reservationDTO.setEmpId(rs.getString("emp_id"));
	                reservationDTO.setRoomId(rs.getString("room_id"));
	                reservationDTO.setRegTerm(rs.getString("reg_term"));
	                reservationDTO.setStartDate(rs.getDate("start_date"));
	                reservationDTO.setFinishDate(rs.getDate("finish_date"));
	                reservationDTO.setFee(rs.getInt("fee"));
	                reservationDTO.setUseCount(rs.getInt("use_count"));
	                reservationDTO.setApproDate(rs.getDate("appro_date"));
	                reservationDTO.setRegDate(rs.getDate("reg_date"));
	                reservationDTO.setRegState(rs.getString("reg_state"));
	                reservationDTO.setUseState(rs.getString("use_state"));
	                reservationDTO.setUsePurpose(rs.getString("use_purpose"));
	                reservationDTO.setUseNetwork(rs.getString("use_network"));

	                reservationCrList.add(reservationDTO);
	             }

	            } catch (SQLException e) {
	            	throw new RuntimeException(e);
	            } finally {
	               ReservationDAO.close(con, pstmt);
	            }

		return reservationCrList;
	}

	public ReservationDTO selectById(int regInId){
		ReservationDTO reservationDTO = new ReservationDTO();
		Connection con = getConnection();
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        //사용자가 조회한 시간에 회의실이 예약되어 있는지 확인
        String sql = "select * from reservation where reg_in_id = ?";
        try {
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, regInId);
            rs = pstmt.executeQuery();
            while(rs.next()){
            	reservationDTO.setRegInId(rs.getInt("reg_in_id"));
                reservationDTO.setEmpId(rs.getString("emp_id"));
                reservationDTO.setRoomId(rs.getString("room_id"));
                reservationDTO.setRegTerm(rs.getString("reg_term"));
                reservationDTO.setStartDate(rs.getDate("start_date"));
                reservationDTO.setFinishDate(rs.getDate("finish_date"));
                reservationDTO.setFee(rs.getInt("fee"));
                reservationDTO.setUseCount(rs.getInt("use_count"));
                reservationDTO.setApproDate(rs.getDate("appro_date"));
                reservationDTO.setRegDate(rs.getDate("reg_date"));
                reservationDTO.setRegState(rs.getString("reg_state"));
                reservationDTO.setUseState(rs.getString("use_state"));
                reservationDTO.setUsePurpose(rs.getString("use_purpose"));
                reservationDTO.setUseNetwork(rs.getString("use_network"));
            }

           } catch (SQLException e) {
        	   e.printStackTrace();
           } finally {
              ReservationDAO.close(con, pstmt);
           }

		return reservationDTO;

	}

   /**
    *
   * @작성일  : 2017. 5. 8.
   * @작성자  : 김준호
   * @기능    : 특정 회의실의 start시각과 finish시각에 예약이 가능한지 조회
   * @메소드명 : selectAbleReservation
   * @param roomId - 조회할 회의실 id
   * @param selectedDate - 조회할 일자
   * @param start - 예약하고싶은 시작시간
   * @param finish - 예약하고싶은 종료시간
   * @return - 예약 가능여부 (가능: true/ 불가: false)
    */
   public boolean selectAbleReservation(String roomId, String selectedDate, String start, String finish){

      Connection con = getConnection();
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      int result = 0;
      //사용자가 조회한 시간에 회의실이 예약되어 있는지 확인
      String sql = "select count(1) from RESERVATION where ROOM_ID like ? AND "
            + "((to_date(?, 'yyyy-mm-dd hh24:mi:ss') BETWEEN START_DATE AND FINISH_DATE) "
            + "OR (to_date(?, 'yyyy-mm-dd hh24:mi:ss') BETWEEN START_DATE AND FINISH_DATE) "
            + "OR START_DATE BETWEEN to_date(?, 'yyyy-mm-dd hh24:mi:ss') AND to_date(?, 'yyyy-mm-dd hh24:mi:ss') "
            + "OR FINISH_DATE BETWEEN to_date(?, 'yyyy-mm-dd hh24:mi:ss') AND to_date(?, 'yyyy-mm-dd hh24:mi:ss'))";

      	//System.out.println("시작시: " + selectedDate + " "  + start);
      	//System.out.println("종료시: " + selectedDate + " "  + finish);
         try {
             pstmt = con.prepareStatement(sql);
             int idx = 0;
             pstmt.setString(++idx, roomId); //회의실ID
             pstmt.setString(++idx, selectedDate + " " + start);  //회의실 사용시작 시간
             pstmt.setString(++idx, selectedDate + " " + finish); //회의실 사용종료 시간
             pstmt.setString(++idx, selectedDate + " " + start);
             pstmt.setString(++idx, selectedDate + " " + finish);
             pstmt.setString(++idx, selectedDate + " " + start);
             pstmt.setString(++idx, selectedDate + " " + finish);

             rs = pstmt.executeQuery();
             if(rs.next()){
                result = rs.getInt(1);
             }

            } catch (SQLException e) {
               e.printStackTrace();
            } finally {
               ReservationDAO.close(con, pstmt);
            }

         if(result == 0)
            return true;
         else
            return false;
   }

   /**
    * 
    * @작성일  : 2017. 5. 12.
    * @작성자  : 김태형
    * @기능    : 예약 불가능한 날짜의 리스트를 문자열로 가져온다.
    * @메소드명 : getDisableDays
    * @param roomId - 예약하고자 하는 회의실 Id
    * @return - roomId 회의실의 예약 불가능한 날짜 리스트
    */
   public String getDisableDays(String roomId){
	   String result = "";

	   Connection con = getConnection();
	   PreparedStatement pstmt = null;
	   ResultSet rs = null;
	   String sql = "SELECT DISTINCT to_char(start_date + (LEVEL-1),'yyyy-mm-dd') dates " 
			   + "FROM reservation WHERE room_id like ? CONNECT BY LEVEL <= (finish_date - start_date + 1) ORDER BY dates";

	   try {
		   pstmt = con.prepareStatement(sql);
		   pstmt.setString(1, roomId); //회의실ID

		   rs = pstmt.executeQuery();
		   while(rs.next()){
			   //result += "'" + rs.getString(1) + "', ";
			   
			   //0없는 형식
			   result += "'" + (rs.getString(1)).split("-")[0] + "-"
					   + Integer.parseInt((rs.getString(1)).split("-")[1]) + "-"
					   + Integer.parseInt((rs.getString(1)).split("-")[2]) + "', ";
		   }
		   if(result.length() > 2) result = result.substring(0, result.lastIndexOf(", ")); //끝에 컴마 제거
	   } catch (SQLException e) {
		   e.printStackTrace();
	   } finally {
		   ReservationDAO.close(con, pstmt);
	   }
	   return result;
   }

   /**
    *
    * @작성일  : 2017. 5. 10.
    * @작성자  : 김태형
    * @기능    : 예약ID를 생성하는 시퀀스의 다음 값을 가져온다.
    * @메소드명 : selectGetNextSequence
    * @return - 새로 등록될 예약 ID값
    */
   public int selectGetNextSequence(){

	   int result = 0;
	   Connection con = getConnection();
	   PreparedStatement pstmt = null;
	   ResultSet rs = null;
	   String sql = "select SEQ_RESERVATION.NEXTVAL from dual";

	   try{
		   pstmt = con.prepareStatement(sql);
		   rs = pstmt.executeQuery();

		   if(rs.next())
			   result = rs.getInt(1);

	   } catch (SQLException e) {
		   e.printStackTrace();
	   } finally {
		   ReservationDAO.close(con, pstmt);
	   }

	   return result;
   }

   /**
    *
    * @작성일  : 2017. 5. 13.
    * @작성자  : 김태형
    * @기능    : 예약 ID를 통해 예약내역(Reservation테이블) 및 관련 테이블들을 모두 삭제한다.(반려일경우)
    * @메소드명 : delete
    * @param regInId
    */

public void delete(int RegInId){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sqlRegOption = "delete from reg_option where reg_in_id = ?";
		String sqlDepOfUseRoom = "delete from dep_of_use_room where reg_in_id = ?";
		String sqlApprovalInfo = "delete from approval_info where reg_in_id = ?";
		String sqlReservation = "delete from reservation where reg_in_id = ?";

		   try {
			   pstmt = con.prepareStatement(sqlRegOption);
			   pstmt.setInt(1, RegInId);
			   pstmt.executeUpdate();

			   pstmt = con.prepareStatement(sqlDepOfUseRoom);
			   pstmt.setInt(1, RegInId);
			   pstmt.executeUpdate();

			   pstmt = con.prepareStatement(sqlApprovalInfo);
			   pstmt.setInt(1, RegInId);
			   pstmt.executeUpdate();

			   pstmt = con.prepareStatement(sqlReservation);
			   pstmt.setInt(1, RegInId);
			   pstmt.executeUpdate();
		      } catch (SQLException e) {
		    	  throw new RuntimeException(e);
		      } finally {
		    	  ReservationDAO.close(con, pstmt);;
		      }
	}

	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	:
	 * @메소드명    : close
	 * @param con
	 * @param pstmt
	 */
	private static void close(Connection con, PreparedStatement pstmt) {
		 try {
			 pstmt.close();
			 con.close();
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	}

}
