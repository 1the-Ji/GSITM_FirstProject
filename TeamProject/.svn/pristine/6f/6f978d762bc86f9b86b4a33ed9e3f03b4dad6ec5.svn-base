package com.gsitm.servlet.reservation;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.gsitm.dao.ApprovalInfoDAO;
import com.gsitm.dao.DepOfUseRoomDAO;
import com.gsitm.dao.FixtureDAO;
import com.gsitm.dao.RegOptionDAO;
import com.gsitm.dao.ReservationDAO;
import com.gsitm.dao.RoomDAO;
import com.gsitm.dao.SnackDAO;
import com.gsitm.dto.ApprovalInfoDTO;
import com.gsitm.dto.DepOfUseRoomDTO;
import com.gsitm.dto.EmployeesDTO;
import com.gsitm.dto.FixtureDTO;
import com.gsitm.dto.RegOptionDTO;
import com.gsitm.dto.ReservationDTO;
import com.gsitm.dto.RoomDTO;
import com.gsitm.dto.SnackDTO;
import com.oreilly.servlet.multipart.ExceededSizeException;

/**
 * 
 * @프로그램명 : ConferenceReserveAction.java
 * @작성일    : 2017. 5. 2.
 * @작성자    : 김태형
 * @기능     : 예약 등록 서블릿
 * @버전     : 1.0
 *
 */
@WebServlet("/conferencereserve")
public class ConferenceReserveAction extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	//Get요청 - 예약 신청 폼을 표시한다.
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		//인코딩 설정
		response.setContentType("text/html;charset=UTF-8");
	    request.setCharacterEncoding("UTF-8");
	    PrintWriter out = response.getWriter();
	    String roomId = request.getParameter("roomId");
	    
	    //로그인 체크
	    if(request.getSession().getAttribute("Employee") == null){
	    	response.sendRedirect(request.getContextPath() + "/login");
	    	return;
	    }
	    
	    //필수 파라미터 체크
	    if(roomId == null){
	    	response.sendError(404); //필수 파라미터가 없으면 404에러 리스폰스
	    	return;
	    }
    	
    	//회의실 정보 가져오기
    	RoomDTO room = (new RoomDAO()).selectRoomInfo(roomId);
    	if(room == null){
    		response.sendError(404);
    		return;
    	}
    	try {
    		//선택한 회의실의 기자재 정보 가져오기
        	List <FixtureDTO> fixtures = (new FixtureDAO()).select(roomId);
        	
        	//선택한 회의실의 간식 정보 가져오기
        	List <SnackDTO> snacks = (new SnackDAO()).select(roomId);
        	
        	//장기예약시 예약 불가능 날짜 리스트 조회하기

        	String disableDays = (new ReservationDAO()).getDisableDays(roomId);
        	System.out.println("예약불가: " + disableDays); 
        	
        	//폼 화면에 표시할 회의실 정보 속성 설정
        	request.setAttribute("room", room);
        	request.setAttribute("fixtures", fixtures);
        	request.setAttribute("snacks", snacks);
        	request.setAttribute("disableDays", disableDays);
        	
        	RequestDispatcher dispatcher = request.getRequestDispatcher("./view/reservation/conferenceReserve.jsp");
        	dispatcher.forward(request, response);
		} catch (Exception e) {
			response.sendError(404);
		}
	}

	//Post요청 - 폼에서 sumit한 결과를 valid한 후 DB에 등록한다.
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		//인코딩 설정
		response.setContentType("text/html;charset=UTF-8");
	    request.setCharacterEncoding("UTF-8");
	      
		PrintWriter out = response.getWriter();
		EmployeesDTO requestUser = (EmployeesDTO) request.getSession().getAttribute("Employee"); //로그인한 사용자 정보
		int resIdSeq = (new ReservationDAO()).selectGetNextSequence(); //새로 등록될 예약 id시퀀스
		
		//세션이 무효상태(로그아웃 or 시간경과)이면 로그인 화면으로 이동
		if(requestUser == null){
			response.sendRedirect("./login");
			return;
		}
		
		try {
			
			//필수 파라미터 체크
			String[] paramCheckList 
				= {"periodMode", "selectedDate", "startHour", "finishHour", "startDate", "finishDate",
				   "roomId", "price", "peoples", "classify", "purpose", "networkUse", "teams"};
			for(String paramCheck : paramCheckList){
				if(checkWhiteSpace(request.getParameter(paramCheck))){
					throw new RuntimeException("필수 파라미터 " + paramCheck + "가 없습니다.");
				}
			}
			
			Calendar startDate = Calendar.getInstance();	//사용 시작시각
			Calendar finishDate = Calendar.getInstance();	//사용 종료시각
			
			//단기예약인 경우
			if ("day".equals(request.getParameter("periodMode"))){
	
				String paramStartDate = (String) request.getParameter("selectedDate");	//2017-05-05
				String paramStartHour = (String) request.getParameter("startHour"); //09:30
				String paramFinishHour = (String) request.getParameter("finishHour"); //10:00
				
				//시작시간 설정
				setCalendalFromString(startDate, paramStartDate, paramStartHour);

				//종료시간 설정 - 일일예약은 시작-종료의 일자가 같고 시간만 다름
				setCalendalFromString(finishDate, paramStartDate, paramFinishHour);
	
			} else if ("period".equals(request.getParameter("periodMode"))){ 
			//기간예약인 경우 (하루 9시-18시까지 최대 3일)
				String paramStartDate = (String) request.getParameter("startDate");	//2017-05-05
				String paramFinishDate = (String) request.getParameter("finishDate"); 
				
				//시작일자
				setCalendalFromString(startDate, paramStartDate, "09:00");
				//종료일자
				setCalendalFromString(finishDate, paramFinishDate, "18:00");
			}
			else {
				//예외
				throw new Exception("예약 구분 파라미터가 잘못되었습니다.");
			}
			
			// --- reservation 테이블 등록 ---
			ReservationDTO reservationDTO = new ReservationDTO();
			reservationDTO.setRegInId(resIdSeq); //예약 ID 
			reservationDTO.setEmpId(requestUser.getEmpId());
			reservationDTO.setRoomId(request.getParameter("roomId"));
			reservationDTO.setStartDate(startDate.getTime());
			reservationDTO.setFinishDate(new Date(finishDate.getTimeInMillis()));
			reservationDTO.setFee(Integer.parseInt(request.getParameter("price")));
			reservationDTO.setUseCount(Integer.parseInt(request.getParameter("peoples")));
			reservationDTO.setApproDate(null); //승인시간
			reservationDTO.setRegState("승인대기");
			reservationDTO.setUseState(request.getParameter("classify"));
			reservationDTO.setUsePurpose(request.getParameter("purpose"));
			reservationDTO.setUseNetwork(request.getParameter("networkUse"));
			reservationDTO.setRegTerm(request.getParameter("periodMode"));
			
			(new ReservationDAO()).insert(reservationDTO);
			
			// --- 사용팀 테이블 등록 ---
			String[] teams = request.getParameterValues("teams");
			DepOfUseRoomDTO depOfUseRoomDTO = new DepOfUseRoomDTO();
			for(String team : teams){
				depOfUseRoomDTO.setRegInId(resIdSeq);
				depOfUseRoomDTO.setDepId(team);
				(new DepOfUseRoomDAO()).insert(depOfUseRoomDTO);
			}
			
			// --- 예약옵션 테이블 등록 ---
			
			//기자재 등록
			String[] fixtureList = request.getParameterValues("fixtures");
			if(fixtureList != null){
				for(int i=0; i<fixtureList.length; i++){
					
					RegOptionDTO regOptionDTO = new RegOptionDTO();
					regOptionDTO.setRegInId(resIdSeq);
					regOptionDTO.setFixtureId(Integer.parseInt(fixtureList[i]));
					(new RegOptionDAO()).insert(regOptionDTO);
				}
			}
			
			//스낵 개수가 1개 이상인 것의 간식 목록 예약 옵션테이블에 넣기
			Enumeration<String> params =  request.getParameterNames();
			while(params.hasMoreElements()){
				String param = (String) params.nextElement();
				if( -1 < param.indexOf("snack_")){
					int snack_id = Integer.parseInt(param.replace("snack_", ""));
					if(request.getParameter(param) == null || "0".equals(request.getParameter(param)))
						continue;
					
					RegOptionDTO regOptionDTO = new RegOptionDTO();
					regOptionDTO.setRegInId(resIdSeq);
					regOptionDTO.setSnackId(snack_id);
					regOptionDTO.setSnackCount(Integer.parseInt(request.getParameter(param)));
					(new RegOptionDAO()).insert(regOptionDTO);
				}
			}
			
			// --- 승인자 테이블 등록 ---
			ApprovalInfoDTO appInfo = new ApprovalInfoDTO();
			appInfo.setRegInId(resIdSeq);
			appInfo.setEmpId("IT0907"); // 결재/승인자 ID
			(new ApprovalInfoDAO()).insert(appInfo);
			
			out.println("<script type='text/javascript'>alert('예약 신청이 완료되었습니다.');");
			out.println("location.href='./mypage';</script>");
			
		} catch (Exception e) {
			out.println("<script type='text/javascript'>alert('예약 등록에 실패하였습니다.\\n" + 
					e.getMessage().replace("'", "").replace("\n", "") + "');");
			out.println("location.href='./conferenceinfo';</script>"); //예약조회 화면으로 이동
		}
	}
	
	private void setCalendalFromString(Calendar cal, String date, String time){
		cal.set(Calendar.YEAR, Integer.parseInt(date.split("-")[0]));
		cal.set(Calendar.MONTH, Integer.parseInt(date.split("-")[1])-1);
		cal.set(Calendar.DATE, Integer.parseInt(date.split("-")[2]));
		cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time.split(":")[0]));
		cal.set(Calendar.MINUTE, Integer.parseInt(time.split(":")[1]));
		cal.set(Calendar.SECOND, 0);
	}
	
	private boolean checkWhiteSpace(String str) {
		if(str == null || "".equals(str)) 
			return true;
		else
			return false;
	}
}
