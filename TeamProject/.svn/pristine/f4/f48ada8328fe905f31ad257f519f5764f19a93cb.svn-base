package com.gsitm.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.gsitm.common.ConstString;
import com.gsitm.dto.ReservationDTO;
/**
 *
 * @프로그램   : EmployeesDAO.java
 * @작성일     : 2017. 5. 2.
 * @작성자     : 지승훈
 * @기능       : 회의실/예약실 사용후 결제를 하기위한 부서 관련 DAO
 * @버전       : 1.0
 *
 */

public class ReservationDAO {
	public static Connection getConnection() {
	      Connection conn = null;
	      try {
	    	  Class.forName(ConstString.JDBC_DRIVER);
		      conn = DriverManager.getConnection(ConstString.DB_SERVER, ConstString.DB_USER, ConstString.DB_PASSWD);
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	      return conn;
	   }

	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	: 회의실/교육실 예약 등록 메소드
	 * @메소드명    : insert
	 * @param reservationDTO
	 */
	public void insert(ReservationDTO reservationDTO){

		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = "INSERT INTO reservation "
				+ "(REG_IN_ID, EMP_ID, ROOM_ID, START_DATE, FINISH_DATE, FEE, USE_COUNT, USE_DEP_ID, APPRO_DATE, REG_STATE, USE_STATE, USE_PURPOSE) "
				+ "VALUES (SEQ_RESERVATION.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		   try {
			   int pIdx = 0;
			   pstmt = con.prepareStatement(sql);
			   pstmt.setString(++pIdx, reservationDTO.getEmpId());
			   pstmt.setString(++pIdx, reservationDTO.getRoomId());
			   pstmt.setDate(++pIdx, new java.sql.Date(reservationDTO.getStartDate().getTime()));
			   pstmt.setDate(++pIdx, new java.sql.Date(reservationDTO.getFinishDate().getTime()));
			   pstmt.setInt(++pIdx, reservationDTO.getFee());
			   pstmt.setInt(++pIdx, reservationDTO.getUseCount());

			   if(reservationDTO.getApproDate() != null)
				   pstmt.setDate(++pIdx, new java.sql.Date(reservationDTO.getApproDate().getTime()));
			   else
				   pstmt.setDate(++pIdx, null);

			   pstmt.setString(++pIdx, reservationDTO.getRegState());
			   pstmt.setString(++pIdx, reservationDTO.getUseState());
			   pstmt.setString(++pIdx, reservationDTO.getUsePurpose());

			   pstmt.executeUpdate();

		      } catch (SQLException e) {
		    	 System.out.println(e.getMessage());
		         throw new RuntimeException(e);
		      } finally {
		    	  ReservationDAO.close(con, pstmt);
		      }
	}

	public void update(ReservationDTO reservationDTOm, int num){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = null; //sql문 작성
		   try {
			   pstmt = con.prepareStatement(sql);

			   pstmt.executeUpdate();
		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		    	  ReservationDAO.close(con, pstmt);;
		      }
	}
	/**
    *
    * @작성일  : 2017. 5. 7.
    * @작성자  : 김준호
    * @기능    :
    * @메소드명 : selectReservation
    * @param selectedBuilding
    * @param startHour
    * @param finishHour
    * @return
    */
   public List<ReservationDTO> selectReservation(String selectedBuilding, String startHour, String finishHour){
      Connection con = getConnection();
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      List<ReservationDTO> reservationRoomList = new ArrayList<ReservationDTO>();
      String sql = "select * from RESERVATION inner join ROOM on RESERVATION.ROOM_ID = ROOM.ROOM_ID where ROOM.BUILD_NAME = ? and START_DATE = ? and FINISH_DATE = ?";
      ReservationDTO rDto = new ReservationDTO(); //Reservation DTO 생성

         try {
             pstmt = con.prepareStatement(sql);
             pstmt.setString(1, selectedBuilding);
             pstmt.setTimestamp(2, java.sql.Timestamp.valueOf(startHour));
             pstmt.setTimestamp(3, java.sql.Timestamp.valueOf(finishHour));
             rs = pstmt.executeQuery();
             while(rs.next()){
                rDto.setRegInId(rs.getInt("REG_IN_ID"));
                rDto.setEmpId(rs.getString("EMP_ID"));
                rDto.setRoomId(rs.getString("ROOM_ID"));
                rDto.setStartDate(rs.getTimestamp("START_DATE"));
                rDto.setFinishDate(rs.getTimestamp("FINISH_DATE"));
                rDto.setFee(rs.getInt("FEE"));
                rDto.setUseCount(rs.getInt("USE_COUNT"));
                rDto.setApproDate(rs.getTimestamp("APPRO_DATE"));
                rDto.setRegState(rs.getString("REG_STATE"));
                rDto.setUseState(rs.getString("USE_STATE"));
                rDto.setUsePurpose(rs.getString("USE_PURPOSE"));
                reservationRoomList.add(rDto);
             }

            } catch (SQLException e) {
               e.printStackTrace();
            } finally {
               ReservationDAO.close(con, pstmt);
            }
         System.out.println("reservationRoomList : " + reservationRoomList.size());
         return reservationRoomList;
   }

   /**
    *
   * @작성일  : 2017. 5. 8.
   * @작성자  : 김준호
   * @기능    : 특정 회의실의 start시각과 finish시각에 예약이 가능한지 조회
   * @메소드명 : selectAbleReservation
   * @param roomId - 조회할 회의실 id
   * @param selectedDate - 조회할 일자
   * @param start - 예약하고싶은 시작시간
   * @param finish - 예약하고싶은 종료시간
   * @return - 예약 가능여부 (가능: true/ 불개: false)
    */
   public boolean selectAbleReservation(String roomId, String selectedDate, String start, String finish){

      Connection con = getConnection();
      PreparedStatement pstmt = null;
      ResultSet rs = null;
      List<ReservationDTO> reservationRoomList = new ArrayList<ReservationDTO>();
      int result = 0;

      String sql = "select count(1) from Reservation Where room_id like ? AND "
            + "((to_date(?, 'yyyy-mm-dd hh24:mi:ss') between start_date AND finish_date) "
            + "OR (to_date(?, 'yyyy-mm-dd hh24:mi:ss') between start_date AND finish_date))";

         try {
             pstmt = con.prepareStatement(sql);
             int idx = 0;
             pstmt.setString(++idx, roomId);
             pstmt.setString(++idx, selectedDate + " " + start);
             pstmt.setString(++idx, selectedDate + " " + finish);

             System.out.println("시작시: " + selectedDate + " " + start + " 끝시: " + selectedDate + " " + finish);
             rs = pstmt.executeQuery();
             if(rs.next()){
                result = rs.getInt(1);
             }

            } catch (SQLException e) {
               e.printStackTrace();
            } finally {
               ReservationDAO.close(con, pstmt);
            }

         if(result == 0)
            return true;
         else
            return false;
   }



	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	:
	 * @메소드명    : close
	 * @param con
	 * @param pstmt
	 */
	private static void close(Connection con, PreparedStatement pstmt) {
		 try {
			 pstmt.close();
			 con.close();
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	}
}
