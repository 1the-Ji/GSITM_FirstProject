package com.gsitm.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.gsitm.common.ConstString;
import com.gsitm.dto.RoomDTO;

/**
 *
 * @프로그램   : EmployeesDAO.java
 * @작성일     : 2017. 5. 2.
 * @작성자     : 지승훈
 * @기능       : 회의실/예약실 사용후 결제를 하기위한 부서 관련 DAO
 * @버전       : 1.0
 *
 */

public class RoomDAO {
	public static Connection getConnection() {
	      Connection conn = null;
	      try {
	    	  Class.forName(ConstString.JDBC_DRIVER);
		      conn = DriverManager.getConnection(ConstString.DB_SERVER, ConstString.DB_USER, ConstString.DB_PASSWD);
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	      return conn;
	   }
	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	: 회의실/교육실 등록을 위한 메소드
	 * @메소드명    : insert
	 * @param roomDTO
	 */
	public String insert(RoomDTO roomDTO){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = "insert into room(room_id,room_name,position,build_name,fee,room_size,number_of_emp,net_flag,emp_id)"
				   + " values(room_seq.NEXTVAL,?,?,?,?,?,?,?,?)";//sql문 작성
		String roomIDSql = "select room_seq.CURRVAL from dual";
		String roomId = null;
		   try {
			   //Room테이블에 데이터 삽입
			   pstmt = con.prepareStatement(sql);
			   pstmt.setString(1, roomDTO.getRoomName());
			   pstmt.setString(2, roomDTO.getPosition());
			   pstmt.setString(3, roomDTO.getBuildName());
			   pstmt.setInt(4, roomDTO.getFee());
			   pstmt.setString(5, roomDTO.getRoomSize());
			   pstmt.setInt(6, roomDTO.getNumberOfEmp());
			   pstmt.setString(7, roomDTO.getNetFlag());
			   pstmt.setString(8, roomDTO.getEmpId());
			   int result = pstmt.executeUpdate();
			   System.out.println("RoomTable insert 성공 " + result);

			   //현재 회의실을 등록하고자 하는 RoomId값 가져오기
			   pstmt = con.prepareStatement(roomIDSql);
			   ResultSet rs = pstmt.executeQuery();
				while(rs.next()){
					roomId = rs.getString("CURRVAL");
				}
		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		    	  RoomDAO.close(con, pstmt);;
		      }
		   return roomId;
	}

	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	: 회의실/교육실를 수정하기위한 메소드
	 * @메소드명    : update
	 * @param roomDTO
	 */
	public void update(RoomDTO roomDTO,int num){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = null; //sql문 작성
		   try {
			   pstmt = con.prepareStatement(sql);

			   pstmt.executeUpdate();
		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		    	  RoomDAO.close(con, pstmt);;
		      }
	}

	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	: 회의실/교육실을 수정하기위한 메소드
	 * @메소드명    : delete
	 * @param num
	 */
	public void delete(int num){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		String sql = null; //sql문 작성
		   try {
			   pstmt = con.prepareStatement(sql);

			   pstmt.executeUpdate();
		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		    	  RoomDAO.close(con, pstmt);;
		      }
	}


	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	: 회의실/교육실에 대한 리스트를 출력하기위한 메소드
	 * @메소드명    : selectAll
	 * @param num
	 * @return
	 */
	public List<RoomDTO> selectAll(String buildingName){
		Connection con = getConnection();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		//해당 건물의 회의실 정보를 담기 위한 ArrayList 생성
		List<RoomDTO> roomList = new ArrayList<RoomDTO>();
		//매개변수로 받은 건물명에 해당하는 회의실 정보를 조회
		String sql = "select * from ROOM where BUILD_NAME like ?";
		   try {
			   pstmt = con.prepareStatement(sql);
			   //매개변수로 받은 건물명을 sql문에 바인딩
			   pstmt.setString(1, buildingName);
			   rs = pstmt.executeQuery();
			   while (rs.next()) {
				   	//해당 건물의 회의실 정보를 담기 위한 RoomDTO 객체 생성
				   RoomDTO rDto = new RoomDTO();
				    rDto.setRoomId(rs.getString("room_id"));				//회의실_교육실ID
				    rDto.setRoomName(rs.getString("room_name"));			//회의실 이름
				    rDto.setPosition(rs.getString("position"));				//회의실 위치
				    rDto.setBuildName(rs.getString("build_name"));			//건물명
				    rDto.setFee(rs.getInt("fee"));							//사용요금
				    rDto.setRoomSize(rs.getString("room_size"));			//회의실 크기
				    rDto.setNumberOfEmp(rs.getInt("number_of_emp"));		//수용인원
				    rDto.setNetFlag(rs.getString("net_flag"));				//NW사용여부
				    rDto.setEmpId(rs.getString("emp_id"));					//직원ID
				    //회의실 정보를 1개씩 누적
				    roomList.add(rDto);
				}
		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		    	  RoomDAO.close(con, pstmt);
		      }
		   System.out.println(roomList.size());
		//해당 건물의 회의실 정보를 담은 ArrayList 리턴
		return roomList;
	}


	/**
	 *
	 * @작성일      : 2017. 5. 2.
	 * @작성자      : 지승훈
	 * @기능    	:
	 * @메소드명    : close
	 * @param con
	 * @param pstmt
	 */
	private static void close(Connection con, PreparedStatement pstmt) {
		 try {
			 pstmt.close();
			 con.close();
	      } catch (Exception e) {
	         e.printStackTrace();
	      }
	}
}
